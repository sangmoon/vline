{"version":3,"sources":["TextField.tsx","recoil/Apperance.ts","Appearance.tsx","Lexion.tsx","MultipleSelect.tsx","recoil/Nose.ts","Nose.tsx","recoil/Palate.ts","Palate.tsx","App.tsx","index.tsx"],"names":["SelectTextFields","_ref","choices","id","label","state","_useRecoilState","useRecoilState","_useRecoilState2","Object","slicedToArray","value","setValue","react","Box","component","noValidate","TextField","select","onChange","event","target","helperText","map","option","MenuItem","key","appearanceIntensityState","atom","default","redColorState","whiteColorState","roseColorState","appearanceIntensity","redColor","whiteColor","roseColor","AppearanceForm","Typography","variant","gutterBottom","Grid","container","spacing","item","xs","sm","floral","greenFruit","citrusFruit","stoneFruit","tropicalFruit","redFruit","blackFruit","driedFruit","herbaceous","herbal","pungentSpice","yeast","malolacticFermentation","oak","deliberateOxidation","fruitDevelopment","bottleAge","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","getStyles","name","availablesNames","theme","fontWeight","indexOf","typography","fontWeightRegular","fontWeightMedium","MultipleSelectChip","useTheme","values","setValues","FormControl","sx","m","InputLabel","Select","labelId","multiple","split","input","OutlinedInput","renderValue","selected","display","flexWrap","gap","Chip","noseIntensityState","noseDevelopmentState","noseFloralState","noseGreenFruitState","noseCitrusFruitState","noseStoneFruitState","noseTropicalFruitState","noseRedFruitState","noseBlackFruitState","noseDriedFruitState","noseHerbaceousState","noseHerbalState","nosePungenSpiceState","noseYeastState","noseMalolacticFermentationState","noseOakState","noseDeliberateOxidationState","noseFruitDevelopmentState","noseBottleAgeState","noseIntensity","development","multipleSelectFeatures","recoilMultipleSelectGrids","keys","feature","concat","NoseForm","React","window","scrollTo","flavorIntensityState","sweetnessState","acidityState","tanninState","alcoholState","palateFloralState","palateGreenFruitState","palateCitrusFruitState","palateStoneFruitState","palateTropicalFruitState","palateRedFruitState","palateBlackFruitState","palateDriedFruitState","palateHerbaceousState","palateHerbalState","palatePungenSpiceState","palateYeastState","palateMalolacticFermentationState","palateOakState","palateDeliberateOxidationState","palateFruitDevelopmentState","palateBottleAgeState","flavorIntensity","sweetness","acidity","tannin","alcohol","multipleSelectGrids","PalateForm","Contact","react_default","a","createElement","color","align","Summary","Fragment","steps","createTheme","App","_React$useState","useState","_React$useState2","activeStep","setActiveStep","ThemeProvider","CssBaseline","AppBar","position","elevation","borderBottom","t","palette","divider","Toolbar","noWrap","Container","maxWidth","mb","Paper","my","md","p","Stepper","pt","pb","Step","StepLabel","length","step","Error","getStepContent","justifyContent","Button","onClick","mt","ml","ReactDOM","createRoot","document","getElementById","render","StrictMode","es"],"mappings":"uQASO,SAASA,EAAgBC,GAAqD,IAAlDC,EAAOD,EAAPC,QAASC,EAAEF,EAAFE,GAAIC,EAAKH,EAALG,MAAOC,EAAKJ,EAALI,MAAKC,EAC9BC,YAAeF,GAAMG,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAzCK,EAAKH,EAAA,GAAEI,EAAQJ,EAAA,GAOvB,OACEK,EAAA,cAACC,EAAA,EAAG,CAACC,UAAU,OAAOC,YAAU,GAC9BH,EAAA,cAACI,EAAA,EAAS,CACRd,GAAIA,EACJe,QAAM,EACNd,MAAOA,EACPO,MAAOA,EACPQ,SAXe,SAACC,GACpBR,EAASQ,EAAMC,OAAOV,QAWlBW,WAAW,6BAEVpB,EAAQqB,IAAI,SAACC,GAAM,OAClBX,EAAA,cAACY,EAAA,EAAQ,CAACC,IAAKF,EAAQb,MAAOa,GAC3BA,OC3BN,IAAMG,EAA2BC,YAAa,CACnDF,IAAK,sBACLG,QAAS,KAGEC,EAAgBF,YAAa,CACxCF,IAAK,WACLG,QAAS,KAGEE,EAAkBH,YAAa,CAC1CF,IAAK,aACLG,QAAS,KAGEG,EAAiBJ,YAAa,CACzCF,IAAK,YACLG,QAAS,KCZLI,EAAsB,CAAC,OAAQ,SAAU,QACzCC,EAAW,CAAC,SAAU,OAAQ,SAAU,QAAS,SACjDC,EAAa,CAAC,cAAe,QAAS,OAAQ,QAAS,SACvDC,EAAY,CAAC,OAAQ,SAAU,UAEtB,SAASC,IACtB,OACExB,EAAA,cAACA,EAAA,SAAc,KACbA,EAAA,cAACyB,EAAA,EAAU,CAACC,QAAQ,KAAKC,cAAY,GAAC,cAGtC3B,EAAA,cAAC4B,EAAA,EAAI,CAACC,WAAS,EAACC,QAAS,GACvB9B,EAAA,cAAC4B,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBjC,EAAA,cAACb,EAAgB,CACfE,QAAS+B,EACT7B,MAAO,YACPD,GAAI,sBACJE,MAAOsB,KAGXd,EAAA,cAAC4B,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBjC,EAAA,cAACb,EAAgB,CACfE,QAASgC,EACT9B,MAAO,YACPD,GAAI,YACJE,MAAOyB,KAGXjB,EAAA,cAAC4B,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBjC,EAAA,cAACb,EAAgB,CACfE,QAASiC,EACT/B,MAAO,cACPD,GAAI,aACJE,MAAO0B,KAGXlB,EAAA,cAAC4B,EAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBjC,EAAA,cAACb,EAAgB,CACfE,QAASkC,EACThC,MAAO,aACPD,GAAI,YACJE,MAAO2B,OC/CnB,IAAMe,EAAS,CACb,SACA,cACA,YACA,cACA,WACA,UACA,OACA,UAEIC,EAAa,CACjB,QACA,aACA,OACA,YACA,SACA,SAEIC,EAAc,CAClB,aACA,QACA,OACA,cACA,cAEIC,EAAa,CAAC,QAAS,UAAW,aAClCC,EAAgB,CACpB,SACA,SACA,QACA,QACA,gBACA,aAEIC,EAAW,CACf,aACA,YACA,YACA,aACA,aACA,YAEIC,EAAa,CACjB,eACA,aACA,UACA,YACA,eACA,cAEIC,EAAa,CACjB,MACA,QACA,SACA,UACA,SACA,YACA,sBACA,oBAEIC,EAAa,CACjB,oBACA,QACA,cACA,YACA,qBAEIC,EAAS,CACb,aACA,OACA,YACA,WACA,SACA,QAEIC,EAAe,CAAC,eAAgB,eAAgB,aAIhDC,EAAQ,CACZ,UACA,QACA,QACA,SACA,UACA,cACA,UAEIC,EAAyB,CAAC,SAAU,SAAU,SAC9CC,EAAM,CACV,UACA,SACA,SACA,UACA,eACA,QACA,eACA,QACA,YACA,SACA,YAIIC,EAAsB,CAC1B,SACA,WACA,WACA,SACA,SACA,WAEIC,EAAmB,CACvB,gBACA,YACA,cACA,eACA,MACA,mBACA,kBACA,oBACA,mBAEIC,EAAY,CAChB,SACA,WACA,WACA,SACA,QACA,WACA,MACA,QACA,UACA,eACA,QACA,OACA,UACA,UACA,aACA,UACA,QACA,iEC/HIC,EAAY,CAChBC,WAAY,CACVC,MAAO,CACLC,UAAWC,IACXC,MAAO,OAKb,SAASC,EACPC,EACAC,EACAC,GAEA,MAAO,CACLC,YACqC,IAAnCF,EAAgBG,QAAQJ,GACpB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","file":"static/js/main.9464ab26.chunk.js","sourcesContent":["import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport { ButtonProps } from \"./type\";\n\n\nimport { useRecoilState} from 'recoil';\n\nexport function SelectTextFields({ choices, id, label, state }: ButtonProps<string>) {\n  const [ value, setValue ] = useRecoilState(state);\n\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <Box component=\"form\" noValidate>\n      <TextField\n        id={id}\n        select\n        label={label}\n        value={value}\n        onChange={handleChange}\n        helperText=\"Please select your choice\"\n      >\n        {choices.map((option) => (\n          <MenuItem key={option} value={option}>\n            {option}\n          </MenuItem>\n        ))}\n      </TextField>\n    </Box>\n  );\n}","import { atom } from 'recoil';\n\nexport const appearanceIntensityState = atom<string>({\n  key: 'appearanceIntensity',\n  default: \"\",\n})\n\nexport const redColorState = atom<string>({\n  key: 'redColor',\n  default: ''\n})\n\nexport const whiteColorState = atom<string>({\n  key: 'whiteColor',\n  default: ''\n})\n\nexport const roseColorState = atom<string>({\n  key: 'roseColor',\n  default: ''\n})\n\n\n\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport {SelectTextFields} from \"./TextField\";\n\nimport {appearanceIntensityState, redColorState, whiteColorState, roseColorState} from \"./recoil/Apperance\";\n\nconst appearanceIntensity = [\"pale\", \"medium\", \"deep\"];\nconst redColor = [\"purple\", \"ruby\", \"garnet\", \"tawny\", \"brown\"];\nconst whiteColor = [\"lemon-green\", \"lemon\", \"gold\", \"amber\", \"brown\"];\nconst roseColor = [\"pink\", \"salmon\", \"orange\"];\n\nexport default function AppearanceForm() {\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Appearance\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={appearanceIntensity}\n            label={\"intensity\"}\n            id={\"appearanceIntensity\"}\n            state={appearanceIntensityState}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={redColor}\n            label={\"red color\"}\n            id={\"readColor\"}\n            state={redColorState}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={whiteColor}\n            label={\"white color\"}\n            id={\"whiteColor\"}\n            state={whiteColorState}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={roseColor}\n            label={\"rose color\"}\n            id={\"roseColor\"}\n            state={roseColorState}\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","/* PRIMARY AROMAS AND FLAVOURS */\nconst floral = [\n  \"acacia\",\n  \"honeysuckle\",\n  \"chamomile\",\n  \"elderflower\",\n  \"geranium\",\n  \"blossom\",\n  \"rose\",\n  \"violet\",\n];\nconst greenFruit = [\n  \"apple\",\n  \"gooseberry\",\n  \"pear\",\n  \"pear drop\",\n  \"quince\",\n  \"grape\",\n];\nconst citrusFruit = [\n  \"grapefruit\",\n  \"lemon\",\n  \"lime\",\n  \"orange peel\",\n  \"lemon peel\",\n];\nconst stoneFruit = [\"peach\", \"apricot\", \"nectarine\"];\nconst tropicalFruit = [\n  \"banana\",\n  \"lychee\",\n  \"mango\",\n  \"melon\",\n  \"passion fruit\",\n  \"pineapple\",\n];\nconst redFruit = [\n  \"redcurrant\",\n  \"cranberry\",\n  \"raspberry\",\n  \"strawberry\",\n  \"red cherry\",\n  \"red plum\",\n];\nconst blackFruit = [\n  \"blackcurrant\",\n  \"blackberry\",\n  \"bramble\",\n  \"blueberry\",\n  \"black cherry\",\n  \"black plum\",\n];\nconst driedFruit = [\n  \"fig\",\n  \"prune\",\n  \"raisin\",\n  \"sultana\",\n  \"kirsch\",\n  \"jamminess\",\n  \"baked/stewed fruits\",\n  \"preserved fruits\",\n];\nconst herbaceous = [\n  \"green bell pepper\",\n  \"grass\",\n  \"tomato leaf\",\n  \"asparagus\",\n  \"blackcurrant leaf\",\n];\nconst herbal = [\n  \"eucalyptus\",\n  \"mint\",\n  \"medicinal\",\n  \"lavender\",\n  \"fennel\",\n  \"dill\",\n];\nconst pungentSpice = [\"black pepper\", \"white pepper\", \"liquorice\"];\nconst other = [\"flint\", \"wet stones\", \"wet wool\"];\n\n/* SECONDARY AROMAS AND FLAVOURS */\nconst yeast = [\n  \"biscuit\",\n  \"bread\",\n  \"toast\",\n  \"pastry\",\n  \"brioche\",\n  \"bread dough\",\n  \"cheese\",\n];\nconst malolacticFermentation = [\"butter\", \"cheese\", \"cream\"];\nconst oak = [\n  \"vanilla\",\n  \"cloves\",\n  \"nutmeg\",\n  \"coconut\",\n  \"butterscotch\",\n  \"cedar\",\n  \"charred wood\",\n  \"smoke\",\n  \"chocolate\",\n  \"coffee\",\n  \"resinous\",\n];\n\n/* TERTIARY AROMAS AND FLAVOURS */\nconst deliberateOxidation = [\n  \"almond\",\n  \"marzipan\",\n  \"hazelnut\",\n  \"walnut\",\n  \"toffee\",\n  \"caramel\",\n];\nconst fruitDevelopment = [\n  \"dried apricot\",\n  \"marmalade\",\n  \"dried apple\",\n  \"dried banana\",\n  \"tar\",\n  \"dried blackberry\",\n  \"dried cranberry\",\n  \"cooked blackberry\",\n  \"cooked red plum\",\n];\nconst bottleAge = [\n  \"petrol\",\n  \"kerosene\",\n  \"cinnamon\",\n  \"ginger\",\n  \"nutty\",\n  \"mushroom\",\n  \"hay\",\n  \"honey\",\n  \"leather\",\n  \"forest floor\",\n  \"earth\",\n  \"game\",\n  \"tobacco\",\n  \"vegetal\",\n  \"wet leaves\",\n  \"savoury\",\n  \"meaty\",\n  \"farmyard\",\n];\n\nexport {\n  floral,\n  greenFruit,\n  citrusFruit,\n  stoneFruit,\n  tropicalFruit,\n  redFruit,\n  blackFruit,\n  driedFruit,\n  herbaceous,\n  herbal,\n  pungentSpice,\n  other,\n  yeast,\n  malolacticFermentation,\n  oak,\n  deliberateOxidation,\n  fruitDevelopment,\n  bottleAge,\n};\n","import * as React from \"react\";\nimport { Theme, useTheme } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport Chip from \"@mui/material/Chip\";\nimport { ButtonProps } from \"./type\";\nimport { useRecoilState} from 'recoil';\n\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nfunction getStyles(\n  name: string,\n  availablesNames: readonly string[],\n  theme: Theme\n) {\n  return {\n    fontWeight:\n      availablesNames.indexOf(name) === -1\n        ? theme.typography.fontWeightRegular\n        : theme.typography.fontWeightMedium,\n  };\n}\n\nexport function MultipleSelectChip({\n  choices,\n  id,\n  label,\n  state\n}: ButtonProps<string[]>) {\n  const theme = useTheme();\n  const [values, setValues] = useRecoilState(state);\n\n  const handleChange = (event: SelectChangeEvent<typeof values>) => {\n    const {\n      target: { value },\n    } = event;\n\n    setValues(typeof value === \"string\" ? value.split(\",\") : value);\n\n  };\n\n  return (\n    <div>\n      <FormControl sx={{ m: 1, width: 300 }}>\n        <InputLabel id=\"demo-multiple-chip-label\">{label}</InputLabel>\n        <Select\n          labelId=\"demo-multiple-chip-label\"\n          id={id}\n          multiple\n          value={values}\n          onChange={handleChange}\n          input={<OutlinedInput id=\"select-multiple-chip\" label={label} />}\n          renderValue={(selected) => (\n            <Box sx={{ display: \"flex\", flexWrap: \"wrap\", gap: 0.5 }}>\n              {selected.map((value) => (\n                <Chip key={value} label={value} />\n              ))}\n            </Box>\n          )}\n          MenuProps={MenuProps}\n        >\n          {choices.map((name) => (\n            <MenuItem\n              key={name}\n              value={name}\n              style={getStyles(name, choices, theme)}\n            >\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import { atom } from 'recoil';\n\nexport const noseIntensityState = atom<string>({\n    key: \"noseIntensity\",\n    default: \"\"\n})\n\nexport const noseDevelopmentState = atom<string>({\n    key: \"noseDevelopment\",\n    default: \"\"\n})\n\nexport const noseFloralState = atom<string[]>({\n    key: \"noseFloral\",\n    default: []\n})\n\nexport const noseGreenFruitState = atom<string[]> ({\n    key: \"noseGreenFruit\",\n    default: []\n})\n\nexport const noseCitrusFruitState = atom<string[]> ({\n    key: \"noseCitrusFruit\",\n    default: []\n})\n\nexport const noseStoneFruitState = atom<string[]> ({\n    key: \"noseStoneFruit\",\n    default: []\n})\n\nexport const noseTropicalFruitState = atom<string[]> ({\n    key: \"noseTropicalFruit\",\n    default: []\n})\n\nexport const noseRedFruitState = atom<string[]> ({\n    key: \"noseRedFruit\",\n    default: []\n})\n\nexport const noseBlackFruitState = atom<string[]> ({\n    key: \"noseBlackFruit\",\n    default: []\n})\n\nexport const noseDriedFruitState = atom<string[]> ({\n    key: \"noseDriedFruit\",\n    default: []\n})\n\nexport const noseHerbaceousState = atom<string[]> ({\n    key: \"noseHerbaceous\",\n    default: []\n})\n\nexport const noseHerbalState = atom<string[]> ({\n    key: \"noseHerbal\",\n    default: []\n})\n\nexport const nosePungenSpiceState = atom<string[]> ({\n    key: \"nosePungenSpice\",\n    default: []\n})\n\nexport const noseYeastState = atom<string[]> ({\n    key: \"noseYeast\",\n    default: []\n})\n\nexport const noseMalolacticFermentationState = atom<string[]> ({\n    key: \"noseMalolacticFermentation\",\n    default: []\n})\n\nexport const noseOakState = atom<string[]> ({\n    key: \"noseOak\",\n    default: []\n})\n\nexport const noseDeliberateOxidationState = atom<string[]> ({\n    key: \"noseDeliberateOxidation\",\n    default: []\n})\n\nexport const noseFruitDevelopmentState = atom<string[]> ({\n    key: \"noseFruitDevelopment\",\n    default: []\n})\n\nexport const noseBottleAgeState = atom<string[]> ({\n    key: \"noseBottleAge\",\n    default: []\n})","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  floral,\n  greenFruit,\n  citrusFruit,\n  stoneFruit,\n  tropicalFruit,\n  redFruit,\n  blackFruit,\n  driedFruit,\n  herbaceous,\n  herbal,\n  pungentSpice,\n  yeast,\n  malolacticFermentation,\n  oak,\n  deliberateOxidation,\n  fruitDevelopment,\n  bottleAge,\n} from \"./Lexion\";\nimport {SelectTextFields} from \"./TextField\";\nimport {MultipleSelectChip} from \"./MultipleSelect\";\nimport {noseIntensityState, noseDevelopmentState, noseFloralState, noseGreenFruitState, noseCitrusFruitState, noseStoneFruitState, noseTropicalFruitState, noseRedFruitState, noseDriedFruitState, noseHerbaceousState, noseHerbalState, nosePungenSpiceState, noseYeastState, noseMalolacticFermentationState, noseOakState, noseDeliberateOxidationState, noseFruitDevelopmentState, noseBottleAgeState, noseBlackFruitState} from \"./recoil/Nose\";\n\nconst noseIntensity = [\n  \"light\",\n  \"medium(-)\",\n  \"medium\",\n  \"medium(+)\",\n  \"pronounced\",\n];\n\nconst development = [\n  \"youthful\",\n  \"developing\",\n  \"fully developed\",\n  \"tired/past its best\",\n];\n\nconst multipleSelectFeatures = {\n  floral: {\n    choices: floral, \n    state: noseFloralState\n  },\n  greenFruit: {\n    choices: greenFruit, \n    state: noseGreenFruitState\n  },\n\n  citrusFruit: {\n    choices: citrusFruit, \n    state: noseCitrusFruitState\n  },\n\n  stoneFruit: {\n    choices: stoneFruit, \n    state: noseStoneFruitState\n  },\n\n  tropicalFruit: {\n    choices: tropicalFruit, \n    state: noseTropicalFruitState\n  },\n\n  redFruit: {\n    choices: redFruit, \n    state: noseRedFruitState\n  },\n\n  blackFruit: {\n    choices: blackFruit,\n    state: noseBlackFruitState\n  },\n\n  driedFruit: {\n    choices: driedFruit,\n    state: noseDriedFruitState\n  },  \n\n  herbaceous: {\n    choices: herbaceous,\n    state: noseHerbaceousState\n  },\n\n  herbal: {\n    choices: herbal,\n    state: noseHerbalState\n  },\n\n  pungentSpice: {\n    choices: pungentSpice,\n    state: nosePungenSpiceState\n  },\n\n  yeast: {\n    choices: yeast,\n    state: noseYeastState\n  },\n\n  malolacticFermentation: {\n    choices: malolacticFermentation,\n    state: noseMalolacticFermentationState\n  },\n  \n  oak: {\n    choices: oak,\n    state: noseOakState\n  },\n\n  deliberateOxidation: {\n    choices: deliberateOxidation,\n    state: noseDeliberateOxidationState\n  },\n\n  fruitDevelopment: {\n    choices: fruitDevelopment,\n    state: noseFruitDevelopmentState\n  },\n\n  bottleAge: {\n    choices: bottleAge,\n    state: noseBottleAgeState\n  },\n}\n\nconst recoilMultipleSelectGrids = (): JSX.Element[] => {\n  const grids = (\n    Object.keys(multipleSelectFeatures) as Array<\n      keyof typeof multipleSelectFeatures\n    >\n  ).map((feature) => {\n    return (\n      <Grid item xs={12} key={feature}>\n        <MultipleSelectChip\n          choices={multipleSelectFeatures[feature][\"choices\"]}\n          id={\"nose-\".concat(feature)}\n          label={feature}\n          state={multipleSelectFeatures[feature][\"state\"]}\n        />\n      </Grid>\n    );\n  });\n  return grids;\n};\n\nexport default function NoseForm() {\n  React.useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Nose\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={noseIntensity}\n            label={\"nose intensity\"}\n            id={\"noseIntensity\"}\n            state={noseIntensityState}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={development}\n            label={\"development\"}\n            id={\"development\"}\n            state={noseDevelopmentState}\n          />\n        </Grid>\n      </Grid>\n      {recoilMultipleSelectGrids()}\n    </React.Fragment>\n  );\n}\n","import { atom } from 'recoil';\n\nexport const flavorIntensityState = atom<string>({\n    key: \"flavorIntensity\",\n    default: \"\"\n})\n\nexport const sweetnessState = atom<string>({\n    key: \"sweetness\",\n    default: \"\"\n})\n\nexport const acidityState = atom<string>({\n    key: \"acidity\",\n    default: \"\"\n})\n\nexport const tanninState = atom<string>({\n    key: \"tannin\",\n    default: \"\"\n})\n\nexport const alcoholState = atom<string>({\n    key: \"alcohol\",\n    default: \"\"\n})\n\nexport const palateFloralState = atom<string[]>({\n    key: \"palateFloral\",\n    default: []\n})\n\nexport const palateGreenFruitState = atom<string[]> ({\n    key: \"palateGreenFruit\",\n    default: []\n})\n\nexport const palateCitrusFruitState = atom<string[]> ({\n    key: \"palateCitrusFruit\",\n    default: []\n})\n\nexport const palateStoneFruitState = atom<string[]> ({\n    key: \"palateStoneFruit\",\n    default: []\n})\n\nexport const palateTropicalFruitState = atom<string[]> ({\n    key: \"palateTropicalFruit\",\n    default: []\n})\n\nexport const palateRedFruitState = atom<string[]> ({\n    key: \"palateRedFruit\",\n    default: []\n})\n\nexport const palateBlackFruitState = atom<string[]> ({\n    key: \"palateBlackFruit\",\n    default: []\n})\n\nexport const palateDriedFruitState = atom<string[]> ({\n    key: \"palateDriedFruit\",\n    default: []\n})\n\nexport const palateHerbaceousState = atom<string[]> ({\n    key: \"palateHerbaceous\",\n    default: []\n})\n\nexport const palateHerbalState = atom<string[]> ({\n    key: \"palateHerbal\",\n    default: []\n})\n\nexport const palatePungenSpiceState = atom<string[]> ({\n    key: \"palatePungenSpice\",\n    default: []\n})\n\nexport const palateYeastState = atom<string[]> ({\n    key: \"palateYeast\",\n    default: []\n})\n\nexport const palateMalolacticFermentationState = atom<string[]> ({\n    key: \"palateMalolacticFermentation\",\n    default: []\n})\n\nexport const palateOakState = atom<string[]> ({\n    key: \"palateOak\",\n    default: []\n})\n\nexport const palateDeliberateOxidationState = atom<string[]> ({\n    key: \"palateDeliberateOxidation\",\n    default: []\n})\n\nexport const palateFruitDevelopmentState = atom<string[]> ({\n    key: \"palateFruitDevelopment\",\n    default: []\n})\n\nexport const palateBottleAgeState = atom<string[]> ({\n    key: \"palateBottleAge\",\n    default: []\n})","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  floral,\n  greenFruit,\n  citrusFruit,\n  stoneFruit,\n  tropicalFruit,\n  redFruit,\n  blackFruit,\n  driedFruit,\n  herbaceous,\n  herbal,\n  pungentSpice,\n  yeast,\n  malolacticFermentation,\n  oak,\n  deliberateOxidation,\n  fruitDevelopment,\n  bottleAge,\n} from \"./Lexion\";\n\nimport {SelectTextFields} from \"./TextField\";\nimport {MultipleSelectChip} from \"./MultipleSelect\";\nimport {flavorIntensityState, sweetnessState, acidityState, tanninState, alcoholState, palateFloralState, palateGreenFruitState, palateCitrusFruitState, palateStoneFruitState, palateTropicalFruitState, palateRedFruitState, palateBlackFruitState, palateDriedFruitState, palateHerbaceousState, palateHerbalState, palatePungenSpiceState, palateYeastState, palateMalolacticFermentationState, palateOakState, palateDeliberateOxidationState, palateFruitDevelopmentState, palateBottleAgeState } from \"./recoil/Palate\";\n\n\nconst flavorIntensity = [\n  \"light\",\n  \"medium(-)\",\n  \"medium\",\n  \"medium(+)\",\n  \"pronounced\",\n];\nconst sweetness = [\n  \"dry\",\n  \"off-dry\",\n  \"medium-dry\",\n  \"medium-sweet\",\n  \"sweet\",\n  \"luscious\",\n];\nconst acidity = [\"low\", \"medium(-)\", \"medium\", \"medium(+)\", \"high\"];\nconst tannin = [\"low\", \"medium(-)\", \"medium\", \"medium(+)\", \"high\"];\nconst alcohol = [\"low\", \"medium\", \"high\"];\n\nconst multipleSelectFeatures = {\n  floral: {\n    choices: floral, \n    state: palateFloralState\n  },\n  greenFruit: {\n    choices: greenFruit, \n    state: palateGreenFruitState\n  },\n\n  citrusFruit: {\n    choices: citrusFruit, \n    state: palateCitrusFruitState\n  },\n\n  stoneFruit: {\n    choices: stoneFruit, \n    state: palateStoneFruitState\n  },\n\n  tropicalFruit: {\n    choices: tropicalFruit, \n    state: palateTropicalFruitState\n  },\n\n  redFruit: {\n    choices: redFruit, \n    state: palateRedFruitState\n  },\n\n  blackFruit: {\n    choices: blackFruit,\n    state: palateBlackFruitState\n  },\n\n  driedFruit: {\n    choices: driedFruit,\n    state: palateDriedFruitState\n  },  \n\n  herbaceous: {\n    choices: herbaceous,\n    state: palateHerbaceousState\n  },\n\n  herbal: {\n    choices: herbal,\n    state: palateHerbalState\n  },\n\n  pungentSpice: {\n    choices: pungentSpice,\n    state: palatePungenSpiceState\n  },\n\n  yeast: {\n    choices: yeast,\n    state: palateYeastState\n  },\n\n  malolacticFermentation: {\n    choices: malolacticFermentation,\n    state: palateMalolacticFermentationState\n  },\n  \n  oak: {\n    choices: oak,\n    state: palateOakState\n  },\n\n  deliberateOxidation: {\n    choices: deliberateOxidation,\n    state: palateDeliberateOxidationState\n  },\n\n  fruitDevelopment: {\n    choices: fruitDevelopment,\n    state: palateFruitDevelopmentState\n  },\n\n  bottleAge: {\n    choices: bottleAge,\n    state: palateBottleAgeState\n  },\n}\n\nconst multipleSelectGrids = (): JSX.Element[] => {\n  const grids = (\n    Object.keys(multipleSelectFeatures) as Array<\n      keyof typeof multipleSelectFeatures\n    >\n  ).map((feature) => {\n    return (\n      <Grid item xs={12} key={feature}>\n        <MultipleSelectChip\n          choices={multipleSelectFeatures[feature][\"choices\"]}\n          id={\"palate-\".concat(feature)}\n          label={feature}\n          state={multipleSelectFeatures[feature][\"state\"]}\n        />\n      </Grid>\n    );\n  });\n  return grids;\n};\n\nexport default function PalateForm() {\n  React.useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        Palate\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={flavorIntensity}\n            label={\"flavor intensity\"}\n            id={\"flavorIntensity\"}\n            state={flavorIntensityState}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={sweetness}\n            label={\"sweetness\"}\n            id={\"sweetness\"}\n            state={sweetnessState}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={acidity}\n            label={\"acidity\"}\n            id={\"acidity\"}\n            state={acidityState}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields\n            choices={alcohol}\n            label={\"alcohol\"}\n            id={\"alcohol\"}\n            state={alcoholState}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <SelectTextFields choices={tannin} label={\"tannin\"} id={\"tannin\"}  state={tanninState}/>\n        </Grid>\n      </Grid>\n      {multipleSelectGrids()}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport AppearanceForm from \"./Appearance\";\nimport NoseForm from \"./Nose\";\nimport PalateForm from \"./Palate\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Paper from \"@mui/material/Paper\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\n\nimport { useRecoilState } from 'recoil';\nimport {appearanceIntensityState, redColorState, whiteColorState, roseColorState} from \"./recoil/Apperance\";\nimport {flavorIntensityState, sweetnessState, acidityState, tanninState, alcoholState, palateFloralState, palateGreenFruitState, palateCitrusFruitState, palateStoneFruitState, palateTropicalFruitState, palateRedFruitState, palateBlackFruitState, palateDriedFruitState, palateHerbaceousState, palateHerbalState, palatePungenSpiceState, palateYeastState, palateMalolacticFermentationState, palateOakState, palateDeliberateOxidationState, palateFruitDevelopmentState, palateBottleAgeState } from \"./recoil/Palate\";\n\n\nfunction Contact() {\n  return (\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n      If you want to request, please mail me via cholsoo22001@gmail.com !\n    </Typography>\n  );\n}\n\nfunction Summary() {\n  return <>Hello world</>\n\n}\n\nconst steps = [\"Appearance\", \"Nose\", \"Palate\"];\n\nfunction getStepContent(step: number) {\n  switch (step) {\n    case 0:\n      return <AppearanceForm />;\n    case 1:\n      return <NoseForm />;\n    case 2:\n      return <PalateForm />;\n    default:\n      throw new Error(\"Unknown step\");\n  }\n}\n\nconst theme = createTheme();\n\nexport default function App() {\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar\n        position=\"absolute\"\n        color=\"default\"\n        elevation={0}\n        sx={{\n          position: \"relative\",\n          borderBottom: (t) => `1px solid ${t.palette.divider}`,\n        }}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Vlind\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container component=\"main\" maxWidth=\"sm\" sx={{ mb: 4 }}>\n        <Paper\n          variant=\"outlined\"\n          sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }}\n        >\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n            Review your blind.\n          </Typography>\n          <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n            {steps.map((label) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          <React.Fragment>\n            {activeStep === steps.length ? (\n              <React.Fragment>\n                <Typography >\n                  <Summary></Summary>\n                </Typography>\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                {getStepContent(activeStep)}\n                <Box sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                  {activeStep !== 0 && (\n                    <Button onClick={handleBack} sx={{ mt: 3, ml: 1 }}>\n                      Back\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleNext}\n                    sx={{ mt: 3, ml: 1 }}\n                  >\n                    {activeStep === steps.length - 1\n                      ? \"Print your tasting\"\n                      : \"Next\"}\n                  </Button>\n                </Box>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        </Paper>\n        <Contact />\n      </Container>\n    </ThemeProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport { RecoilRoot } from 'recoil';\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <RecoilRoot>\n    <App />\n    </RecoilRoot>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}